

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;

public class Deque<Item> implements Iterable<Item> {
    //


    //先创建节点

    private int N;

    private Node newfirst;
    private Node oldfirst;
    private Node oldlast;

    @Override
    public void forEach(Consumer<? super Item> action) {

    }


    //定义一个节点类，类中包含下一个节点的指向信息，以及当前节点存储的item
    public class Node{
        Item item;
        Node next;
    }


    // construct an empty deque
    public Deque(){
        oldfirst=oldlast;

    }

    // is the deque empty?
    public boolean isEmpty(){
        return N==0;
    }

    // return the number of items on the deque
    public int size(){
        return N;
    }

    // add the item to the front
    public void addFirst(Item item){
        if(item==null){
            throw new IllegalArgumentException();
        }
        newfirst=new Node();
        newfirst.item=item;

       if(oldfirst==null){
           oldfirst=newfirst;
           N++;
       }
       else{
           newfirst.next=oldfirst;
           oldfirst=newfirst;
       }
    }

    // add the item to the back
    public void addLast(Item item){
        if(item==null){
            throw new IllegalArgumentException();
        }
        Node newlast =new Node();
        newlast.item=item;
        newlast.next=null;
        if(oldlast==null){
            oldlast=newlast;
            N++;
        }
        else{
            oldlast.next=newlast;
            oldlast=newlast;
            N++;
        }

    }

    // remove and return the item from the front
    // 考虑只有一个节点的情况，头就是尾部，尾部就是头
    public Item removeFirst(){
        if(isEmpty()){
            throw new NoSuchElementException();
        }
        if(oldfirst==null){
            Item item=removeLast();
            return item;
        }
        Item item=oldfirst.item;
        oldfirst=oldfirst.next;
        N--;

        return item;
    }

    // remove and return the item from the back
    public Item removeLast(){
        if(isEmpty()){
            throw new NoSuchElementException();
        }
        if(oldlast==null){
            Item item=removeFirst();
            return item;
        }
        Item item =oldlast.item;
        oldlast=oldlast.next;
        N--;
        return item;

    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator(){
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item> {


        //找出最前面的node
        private Node current = newfirst==null ? oldlast:newfirst ;
        @Override
        public boolean hasNext() {
            return current!=null;
        }

        @Override
        public void remove() throws UnsupportedOperationException {

        }

        @Override
        public Item next() {
            if(current==null){throw new NoSuchElementException();}
            Item item=current.item;
            current=current.next;
            return item;
        }
    }

    // unit testing (required)
    //48n+192bytes
    public static void main(String[] args){
        Deque d=new Deque();
        d.addFirst(4);
        d.addLast(3);
        Iterator a=d.iterator();
        System.out.println(a.hasNext());
        System.out.println(a.next());
    }

    }
//    }
//}



//















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































